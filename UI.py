import sys
import os
import pickle as pkl
from admin import *
from tree_path import *
from dec_tree import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import win32api, win32con

class App(QWidget):
    def __init__(self):
        super(App,self).__init__()
        self.initUI()

    def initUI(self):
        self.close()
        super(App,self).__init__()
        self.setGeometry(400, 100, 1200, 800)
        self.title = 'Decision Tree System'
        self.setWindowTitle(self.title)
        self.setWindowIcon(QIcon('icon.jpg'))
        initfont1=QFont()
        initfont1.setPointSizeF(40)
        initfont2=QFont()
        initfont2.setPointSizeF(15)
        self.tit=QLabel(self)
        self.tit.move(250,150)
        self.tit.setText("Decision Tree System")
        self.tit.setFont(initfont1)
        self.cho=QLabel(self)
        self.cho.move(440,350)
        self.cho.setText("Please choose type of user:")
        self.cho.setFont(initfont2)
        AdminButton=QPushButton(self)
        AdminButton.setText("Administrator")
        AdminButton.setFixedSize(200,60)
        AdminButton.setFont(initfont2)
        AdminButton.move(200,450)
        AdminButton.clicked.connect(self.AdminUI)
        sysManButton=QPushButton(self)
        sysManButton.setText("System Manager")
        sysManButton.setFixedSize(200,60)
        sysManButton.setFont(initfont2)
        sysManButton.move(500,450)
        sysManButton.clicked.connect(self.sysManUI)
        userButton=QPushButton(self)
        userButton.setText("User")
        userButton.setFixedSize(200,60)
        userButton.setFont(initfont2)
        userButton.move(800,450)
        userButton.clicked.connect(self.UserUI)
        self.show()

    def AdminUI(self):
        self.close()
        super(App,self).__init__()
        self.setGeometry(400, 100, 1200, 800)
        self.title = 'Decision Tree System'
        self.setWindowTitle(self.title)
        self.setWindowIcon(QIcon('icon.jpg'))
        font=QFont()
        font.setPointSizeF(15)
        font1=QFont()
        font1.setPointSizeF(25)
        self.picture=QLabel(self)
        self.picture.setGeometry(10,10,1150,800)
        self.picture.move(140,100)
        self.movie=QMovie("ori_tree.gif")
        self.movie.setSpeed(100)
        #set label
        self.lbl=QLabel(self)
        self.lbl.move(900,15)
        self.lbl.setText("Welcome,Administrator.")
        self.lbl.setFont(font)
        self.admin1=QLabel(self)
        self.admin1.move(250,170)
        self.admin1.setFixedSize(800,40)
        self.admin1.setFont(font1)
        #set Button
        backButton=QPushButton(self)
        backButton.setText("Back")
        backButton.setFixedSize(100,40)
        backButton.setFont(font)
        backButton.move(10,10)
        backButton.clicked.connect(self.initUI)
        delTreeButton=QPushButton(self)
        delTreeButton.setText("Delete decision tree")
        delTreeButton.setFixedSize(300,40)
        delTreeButton.setFont(font)
        delTreeButton.move(200,100)
        delTreeButton.clicked.connect(self.del_decision_tree)
        retranTreeButton=QPushButton(self)
        retranTreeButton.setText("Retrain decision tree")
        retranTreeButton.setFixedSize(300,40)
        retranTreeButton.setFont(font)
        retranTreeButton.move(700,100)
        retranTreeButton.clicked.connect(self.retrain_decision_tree)
        self.show()

    def sysManUI(self):
        self.close()
        super(App,self).__init__()
        self.setGeometry(400, 100, 1200, 800)
        self.title = 'Decision Tree System'
        self.setWindowTitle(self.title)
        self.setWindowIcon(QIcon('icon.jpg'))
        font=QFont()
        font.setPointSizeF(15)
        font1=QFont()
        font1.setPointSizeF(25)
        font2=QFont()
        font2.setPointSizeF(10)
        #set label
        self.lbl=QLabel(self)
        self.lbl.move(900,15)
        self.lbl.setText("Welcome,System Manager.")
        self.lbl.setFont(font)
        self.sysM1=QLabel(self)
        self.sysM1.move(350,470)
        self.sysM1.setFixedSize(800,40)
        self.sysM1.setFont(font1)
        self.sysM4=QLabel(self)
        self.sysM4.move(160,300)
        self.sysM4.setFixedSize(1000,500)
        self.sysM4.setFont(font)
        self.sysM2=QLabel(self)
        self.sysM2.move(130,130)
        self.sysM2.setText("sepal length  sepal width  petal length  petal width            class")
        self.sysM2.setFont(font2)
        self.sysM3=QLabel(self)
        self.sysM3.move(130,280)
        self.sysM3.setText("sepal length  sepal width  petal length  petal width            class")
        self.sysM3.setFont(font2)
        #set text label
        self.sysAdd1=QLineEdit(self)
        self.sysAdd1.setFixedSize(50,50)
        self.sysAdd1.setFont(font)
        self.sysAdd1.move(160,150)
        self.sysAdd2=QLineEdit(self)
        self.sysAdd2.setFixedSize(50,50)
        self.sysAdd2.setFont(font)
        self.sysAdd2.move(280,150)
        self.sysAdd3=QLineEdit(self)
        self.sysAdd3.setFixedSize(50,50)
        self.sysAdd3.setFont(font)
        self.sysAdd3.move(400,150)
        self.sysAdd4=QLineEdit(self)
        self.sysAdd4.setFixedSize(50,50)
        self.sysAdd4.setFont(font)
        self.sysAdd4.move(520,150)
        self.sysAdd5=QLineEdit(self)
        self.sysAdd5.setFixedSize(200,50)
        self.sysAdd5.setFont(font)
        self.sysAdd5.move(640,150)
        #self.sysAdd5.setText("Iris-versicolor")
        self.sysDel1=QLineEdit(self)
        self.sysDel1.setFixedSize(50,50)
        self.sysDel1.setFont(font)
        self.sysDel1.move(160,300)
        self.sysDel2=QLineEdit(self)
        self.sysDel2.setFixedSize(50,50)
        self.sysDel2.setFont(font)
        self.sysDel2.move(280,300)
        self.sysDel3=QLineEdit(self)
        self.sysDel3.setFixedSize(50,50)
        self.sysDel3.setFont(font)
        self.sysDel3.move(400,300)
        self.sysDel4=QLineEdit(self)
        self.sysDel4.setFixedSize(50,50)
        self.sysDel4.setFont(font)
        self.sysDel4.move(520,300)
        self.sysDel5=QLineEdit(self)
        self.sysDel5.setFixedSize(200,50)
        self.sysDel5.setFont(font)
        self.sysDel5.move(640,300)
        #self.sysDel5.setText("Iris-versicolor")
        #set Button
        backButton=QPushButton(self)
        backButton.setText("Back")
        backButton.setFixedSize(100,40)
        backButton.setFont(font)
        backButton.move(10,10)
        backButton.clicked.connect(self.initUI)
        addDataButton=QPushButton(self)
        addDataButton.setText("Add data")
        addDataButton.setFixedSize(200,40)
        addDataButton.setFont(font)
        addDataButton.move(900,155)
        addDataButton.clicked.connect(self.add_data)
        delDataButton=QPushButton(self)
        delDataButton.setText("Delete data")
        delDataButton.setFixedSize(200,40)
        delDataButton.setFont(font)
        delDataButton.move(900,300)
        delDataButton.clicked.connect(self.del_data)
        self.show()

    def UserUI(self):
        self.close()
        super(App,self).__init__()
        self.setGeometry(400, 100, 1200, 800)
        self.title = 'Decision Tree System'
        self.setWindowTitle(self.title)
        self.setWindowIcon(QIcon('icon.jpg'))
        font=QFont()
        font.setPointSizeF(15)
        font1=QFont()
        font1.setPointSizeF(25)
        font2=QFont()
        font2.setPointSizeF(13)
        self.lbl=QLabel(self)
        self.lbl.move(1000,15)
        self.lbl.setText("Welcome,User.")
        self.lbl.setFont(font)
        self.picture=QLabel(self)
        self.picture.setGeometry(10,10,800,800)
        self.picture.move(10,110)
        #set function button
        backButton=QPushButton(self)
        backButton.setText("Back")
        backButton.setFixedSize(100,40)
        backButton.setFont(font)
        backButton.move(10,10)
        backButton.clicked.connect(self.initUI)
        visualizeButton=QPushButton(self)
        visualizeButton.setText("Visualize")
        visualizeButton.setFixedSize(150,40)
        visualizeButton.setFont(font)
        visualizeButton.move(550,60)
        visualizeButton.clicked.connect(self.show_ori_tree)
        classifyButton=QPushButton(self)
        classifyButton.setText("Classify")
        classifyButton.setFixedSize(150,40)
        classifyButton.setFont(font)
        classifyButton.move(880,120)
        classifyButton.clicked.connect(self.classify)
        classifyFileButton=QPushButton(self)
        classifyFileButton.setText("Classify")
        classifyFileButton.setFixedSize(150,40)
        classifyFileButton.setFont(font)
        classifyFileButton.move(880,170)
        classifyFileButton.clicked.connect(self.classifyFile)
        #set text label
        self.l1=QLineEdit(self)
        self.l1.setFixedSize(50,50)
        self.l1.setFont(font)
        self.l1.move(460,110)
        self.l2=QLineEdit(self)
        self.l2.setFont(font)
        self.l2.setFixedSize(50,50)
        self.l2.move(560,110)
        self.l3=QLineEdit(self)
        self.l3.setFixedSize(50,50)
        self.l3.setFont(font)
        self.l3.move(660,110)
        self.l4=QLineEdit(self)
        self.l4.setFixedSize(50,50)
        self.l4.setFont(font)
        self.l4.move(760,110)
        self.filepath=QLineEdit(self)
        self.filepath.setFixedSize(350,50)
        self.filepath.setFont(font)
        self.filepath.move(460,170)
        #set show label
        self.Intro=QLabel(self)
        self.Intro.move(50,70)
        self.Intro.setFont(font)
        self.Intro.setText("Visualize the decision tree:")
        self.sl=QLabel(self)
        self.sl.move(10,110)
        self.sl.setText("sepal length(cm), sepal width(cm)\npetal length(cm), petal width(cm)")
        self.sl.setFont(font)
        self.s2=QLabel(self)
        self.s2.move(10,180)
        self.s2.setText("Classify data file,file path:")
        self.s2.setFont(font)
        self.valid=QLabel(self)
        self.valid.move(850,400)
        self.valid.setFixedSize(800,250)
        self.valid.setFont(font2)
        self.result=QLabel(self)
        self.result.move(850,450)
        self.result.setFixedSize(400,40)
        self.result.setFont(font1)
        self.result.setStyleSheet("color:rgb(255,0,0);")
        self.show()

    def del_decision_tree(self):
        os.system("del dec_tree.csv")
        self.admin1.setText("Delete decision tree successfully.")

    def retrain_decision_tree(self):
        os.system("python dec_tree.py True")
        os.system("python ori_tree.py")
        self.admin1.setText("Retrain decision tree successfully.")
        os.system("python mkgif.py")
        self.picture.setMovie(self.movie)
        self.movie.start()

    def add_data(self):
        add=[]
        add1=[]
        a=self.sysAdd1.text()
        b=self.sysAdd2.text()
        c=self.sysAdd3.text()
        d=self.sysAdd4.text()
        e=self.sysAdd5.text()
        add.append(a)
        add.append(b)
        add.append(c)
        add.append(d)
        add.append(e)
        add1.append(str(a))
        add1.append(str(b))
        add1.append(str(c))
        add1.append(str(d))
        add1.append(str(e))
        r=is_valid(add,True)
        self.sysM4.setText(r)
        if r=='':
            add_data(add1)
            self.sysM1.setText("Add data successfully")

    def del_data(self):
        dele=[]
        vd=[]
        a=self.sysDel1.text()
        b=self.sysDel2.text()
        c=self.sysDel3.text()
        d=self.sysDel4.text()
        e=self.sysDel5.text()
        dele.append(float(a))
        dele.append(float(b))
        dele.append(float(c))
        dele.append(float(d))
        dele.append(str(e))
        vd.append(a)
        vd.append(b)
        vd.append(c)
        vd.append(d)
        vd.append(e)
        r=is_valid(vd,True)
        self.sysM4.setText(r)
        if r=='':
            g=delete_data(dele)
            self.sysM1.setText(g)

    def show_ori_tree(self):
        png=QPixmap("ori_tree.png")
        self.picture.setPixmap(png)
    
    def classify(self):
        self.valid.setText('')
        cla=[]
        self.result.setText('')
        self.valid.setText('')
        a=self.l1.text()
        b=self.l2.text()
        c=self.l3.text()
        d=self.l4.text()
        cla.append(a)
        cla.append(b)
        cla.append(c)
        cla.append(d)
        r=is_valid(cla)
        if r=='':
            g=draw_path_tree(a,b,c,d)
            png=QPixmap("tree_path.png")
            self.picture.setPixmap(png)
            self.result.setText(g)
        else:
            png=QPixmap("ori_tree.png")
            self.picture.setPixmap(png)
            self.valid.setText(r)
    
    def classifyFile(self):
        self.result.setText('')
        png=QPixmap("ori_tree.png")
        self.picture.setPixmap(png)
        path=self.filepath.text()
        root=pkl.load(open('tree.pkl','r'))
        r=test_file(path,root)
        self.valid.setText(r)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    sys.exit(app.exec_())

